{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\ReactFolio\\\\src\\\\components\\\\OpenSource\\\\OpenSource.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport './OpenSource.css';\nimport GithubCard from '../GithubCard/GithubCard';\nimport { openSourceProjects } from '../../portfolio';\n\nfunction OpenSource() {\n  const [repos, setRepos] = useState([]);\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    // I don't know well about this part...\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${process.env.REACT_APP_GITHUB_TOKEN}`\n          }\n        });\n      }\n    });\n    client.query({\n      query: gql`\n                {\n                user(login: \"ikalli\") {\n                    pinnedItems(first: 6, types: [REPOSITORY]) {\n                        totalCount\n                        edges {\n                            node {\n                                ... on Repository {\n                                    name\n                                    description\n                                    forkCount\n                                    stargazers {\n                                        totalCount\n                                    }\n                                    url\n                                    id\n                                    diskUsage\n                                    primaryLanguage {\n                                        name\n                                        color\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            `\n    }).then(result => {\n      setrepoFunction(result.data.user.pinnedItems.edges);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  function setrepoFunction(arr) {\n    setRepos(arr);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    id: \"opensource\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"project-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, openSourceProjects.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"repo-cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, repos.map((repo, i) => {\n    return /*#__PURE__*/React.createElement(GithubCard, {\n      repos: repo,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 28\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/Ikalli\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"More Projects\"));\n}\n\nexport default OpenSource;","map":{"version":3,"sources":["C:/dev/react/ReactFolio/src/components/OpenSource/OpenSource.tsx"],"names":["React","useState","useEffect","ApolloClient","gql","GithubCard","openSourceProjects","OpenSource","repos","setRepos","getRepoData","client","uri","request","operation","setContext","headers","authorization","process","env","REACT_APP_GITHUB_TOKEN","query","then","result","setrepoFunction","data","user","pinnedItems","edges","catch","error","console","log","arr","title","map","repo","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AACA,OAAO,kBAAP;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;;AAEA,SAASC,UAAT,GAAsB;AAClB,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASA,WAAT,GAA6B;AACzB;AACA,UAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC5BS,MAAAA,GAAG,EAAE,gCADuB;AAE5BC,MAAAA,OAAO,EAAGC,SAAD,IAAe;AACpBA,QAAAA,SAAS,CAACC,UAAV,CAAqB;AACjBC,UAAAA,OAAO,EAAE;AACLC,YAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,sBAAuB;AADvD;AADQ,SAArB;AAKH;AAR2B,KAAjB,CAAf;AAWAT,IAAAA,MAAM,CACDU,KADL,CACW;AACHA,MAAAA,KAAK,EAAEjB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADR,KADX,EA+BCkB,IA/BD,CA+BOC,MAAD,IAAY;AACdC,MAAAA,eAAe,CAACD,MAAM,CAACE,IAAP,CAAYC,IAAZ,CAAiBC,WAAjB,CAA6BC,KAA9B,CAAf;AACH,KAjCD,EAkCCC,KAlCD,CAkCO,UAAUC,KAAV,EAAiB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KApCD;AAqCH;;AAED,WAASN,eAAT,CAAyBS,GAAzB,EAAwC;AACpCxB,IAAAA,QAAQ,CAACwB,GAAD,CAAR;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,EAAE,EAAC,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B3B,kBAAkB,CAAC4B,KAAlD,CADJ,eAEI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK1B,KAAK,CAAC2B,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACpB,wBAAO,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAED,IAAnB;AAAyB,MAAA,GAAG,EAAEC,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFA,CADL,CAFJ,eAOI;AAAG,IAAA,IAAI,EAAC,2BAAR;AAAoC,IAAA,MAAM,EAAC,QAA3C;AAAoD,IAAA,GAAG,EAAC,qBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPJ,CADJ;AAWH;;AACD,eAAe9B,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ApolloClient, { gql } from 'apollo-boost';\r\nimport './OpenSource.css';\r\nimport GithubCard from '../GithubCard/GithubCard';\r\nimport { openSourceProjects } from '../../portfolio';\r\n\r\nfunction OpenSource() {\r\n    const [ repos, setRepos ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getRepoData();\r\n    }, []);\r\n\r\n    function getRepoData(): void {\r\n        // I don't know well about this part...\r\n        const client = new ApolloClient({\r\n            uri: \"https://api.github.com/graphql\",\r\n            request: (operation) => {\r\n                operation.setContext({\r\n                    headers: {\r\n                        authorization: `Bearer ${process.env.REACT_APP_GITHUB_TOKEN}`,\r\n                    },\r\n                });\r\n            },\r\n        });\r\n      \r\n        client\r\n            .query({\r\n                query: gql`\r\n                {\r\n                user(login: \"ikalli\") {\r\n                    pinnedItems(first: 6, types: [REPOSITORY]) {\r\n                        totalCount\r\n                        edges {\r\n                            node {\r\n                                ... on Repository {\r\n                                    name\r\n                                    description\r\n                                    forkCount\r\n                                    stargazers {\r\n                                        totalCount\r\n                                    }\r\n                                    url\r\n                                    id\r\n                                    diskUsage\r\n                                    primaryLanguage {\r\n                                        name\r\n                                        color\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            `,\r\n        })\r\n        .then((result) => {\r\n            setrepoFunction(result.data.user.pinnedItems.edges);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    function setrepoFunction(arr: []): void {\r\n        setRepos(arr);\r\n    }\r\n    return (\r\n        <div className=\"main\" id=\"opensource\">\r\n            <h1 className=\"project-title\">{openSourceProjects.title}</h1>\r\n            <div className=\"repo-cards\">\r\n                {repos.map((repo, i) => {\r\n                    return <GithubCard repos={repo} key={i} />;\r\n                })}\r\n            </div>\r\n            <a href=\"https://github.com/Ikalli\" target=\"_blank\" rel=\"noopener noreferrer\">More Projects</a>\r\n        </div>\r\n    );\r\n}\r\nexport default OpenSource;"]},"metadata":{},"sourceType":"module"}